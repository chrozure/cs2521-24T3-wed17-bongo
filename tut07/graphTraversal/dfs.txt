dfs(G, src):
    Input: graph G, vertex src

    create visited array, initialised to false
    create predecessor array, initialised to -1
    create stack S

    push src onto S

    while S is not empty:
        pop v from S
        if v has been visited:
            continue

        mark v as visited

        for each neighbour w of v:
            if w has not been visited:
                set predecessor of w to v
                push w onto S


For dfs(g, 0):

#  Printed  visited                   pred                      Stack (top at right)
            0  1  2  3  4  5  6  7    0  1  2  3  4  5  6  7
0     -     0  0  0  0  0  0  0  0    -  -  -  -  -  -  -  -    0
1     0     1  0  0  0  0  0  0  0    -  0  0  -  -  0  0  0    7  6  5  2  1
2     1     1  1  0  0  0  0  0  0    -  0  0  -  -  0  0  1    7  6  5  2  7
3     7     1  1  0  0  0  0  0  1    -  0  0  -  7  0  7  1    7  6  5  2  6  4
4     4     1  1  0  0  1  0  0  1    -  0  0  4  7  4  4  1    7  6  5  2  6  6  5  3
5     3     1  1  0  1  1  0  0  1    -  0  0  4  7  3  4  1    7  6  5  2  6  6  5  5
6     5     1  1  0  1  1  1  0  1    -  0  0  4  7  3  4  1    7  6  5  2  6  6  5
7     6     1  1  0  1  1  1  1  1    -  0  0  4  7  3  4  1    7  6  5  2  6
8     2     1  1  1  1  1  1  1  1    -  0  0  4  7  3  4  1    7  6  5
